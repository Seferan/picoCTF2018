nc 2018shell.picoctf.com 59208
c: 6248240025043854684405555049971462176821736811257920561518478991864242765793684
n: 12251761860944483606751883449696528080072010141745857839539893207146089191955171
e: 65537

# program which takes about 5 minutes to run...
https://www.alpertron.com.ar/ECM.HTM
# factordb did not find any values
http://factordb.com/index.php?query=12251761860944483606751883449696528080072010141745857839539893207146089191955171

#12 251761 860944 483606 751883 449696 528080 072010 141745 857839 539893 207146 089191 955171 (80 digits) = 
# 119 524803 735995 155582 686580 157182 393483 (39 digits) Ã— 
# 102503 927870 954861 691192 051891 345843 056137 (42 digits)

# Euler's totient: 12 251761 860944 483606 751883 449696 528079 969386 689071 166982 693118 468674 586166 505552 (80 digits)
# this is (p-1)*(q-1)
# we can take modular inverse of 65537 and that number and get the private exponent.
# will continue in get_flag.py

#p = 119524803735995155582686580157182393483
#q = 102503927870954861691192051891345843056137

#with these values from above, we can use the following site to solve:
#https://www.cryptool.org/en/cto-highlights/rsa-step-by-step

#plaintext: 198614235373674103789367498165241205414198384663776181046663386474495554173
#hex(198614235373674103789367498165241205414198384663776181046663386474495554173)
#'0x7069636f4354467b7573335f6c40726733725f7072316d33245f333433327dL'
#>>> hex(198614235373674103789367498165241205414198384663776181046663386474495554173)[2:-1]
#'7069636f4354467b7573335f6c40726733725f7072316d33245f333433327d'
#>>> (hex(198614235373674103789367498165241205414198384663776181046663386474495554173)[2:-1]).decode('hex')
#'picoCTF{us3_l@rg3r_pr1m3$_3432}'



